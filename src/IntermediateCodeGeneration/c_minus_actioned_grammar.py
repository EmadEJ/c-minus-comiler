start_nonterminal = "Program"

actioned_grammar = { # currently doesn't support action at the very beginning. tell me if you need it Emad jan
    "Program": [["DeclarationList", '$']],
    "DeclarationList": [["Declaration", "DeclarationList"], []],
    "Declaration": [["DeclarationInitial", "DeclarationPrime"]],
    "DeclarationInitial": [["TypeSpecifier", "#SAVE_TYPE", "#SET_FORCE_DECLARE", "ID", "#START_NO_PUSH", "#PID", "#END_NO_PUSH", "#UNSET_FORCE_DECLARE"]],
    "DeclarationPrime": [["FunDeclarationPrime"], ["VarDeclarationPrime", "#ZERO_INIT", "#VOID_CHECK_THROW"]],
    "VarDeclarationPrime": [[";"], ["[", "NUM", "#PNUM", "]", "#DECLARE_ARRAY", ";"]],
    "FunDeclarationPrime": [["(", "#DECL ARE_FUN", "#OPEN_SCOPE", "#SET_FUNCTION_SCOPE", "Params", ")", "CompoundStmt", "#JUMP_BACK"]],
    "TypeSpecifier": [["int"], ["void", "#VOID_CHECK"]],
    "Params": [["int", "#SAVE_TYPE", "#SET_FORCE_DECLARE", "ID", "#PID", "#UNSET_FORCE_DECLARE", "ParamPrime", "#POP_PARAM", "ParamList"], ["void"]],
    "ParamList": [[",", "Param", "ParamList"], []],
    "Param": [["DeclarationInitial", "ParamPrime", "#POP_PARAM"]],
    "ParamPrime": [["[", "]", "ARRAY_PARAM"], []],
    "CompoundStmt": [["{", "#OPEN_SCOPE", "DeclarationList", "StatementList", "#CLOSE_SCOPE", "}"]],
    "StatementList": [["Statement", "StatementList"], []],
    "Statement": [["ExpressionStmt"], ["CompoundStmt"], ["SelectionStmt"], ["IterationStmt"], ["ReturnStmt"]],
    "ExpressionStmt": [["Expression", "#POP", ";"], ["break", "#BREAK", ";"], [";"]],
    "SelectionStmt": [["if", "(", "#START_RHS", "Expression", "#END_RHS", ")", "#SAVE", "Statement", "#ELSE_JUMP", "else", "Statement", "#END_IF_JUMP"]],
    "IterationStmt": [["while", "#LABEL", "(", "#START_RHS", "Expression", "#END_RHS", ")", "#SAVE", "Statement", "#WHILE"]],
    "ReturnStmt": [["return", "#START_RHS", "ReturnStmtPrime", "#END_RHS", "#JUMP_BACK"]],
    "ReturnStmtPrime": [[";"], ["Expression", "#SET_RETURN_VALUE", ";"]],

    "Expression": [["SimpleExpressionZegond"], ["ID", "#PID", "B"]],
    "B": [["=", "Expression", "#ASSIGN"], ["[", "Expression", "]", "#LIST_ACC", "H"], ["SimpleExpressionPrime"]],
    "H": [["=", "Expression", "#ASSIGN"], ["G", "D", "C"]],
    "SimpleExpressionZegond": [["AdditiveExpressionZegond", "C"]],
    "SimpleExpressionPrime": [["AdditiveExpressionPrime", "C"]],
    "C": [["Relop", "#SYMB", "AdditiveExpression", "#COMPARE"], []],
    "Relop": [["<"], ["=="]],
    "AdditiveExpression": [["Term", "D"]],
    "AdditiveExpressionPrime": [["TermPrime", "D"]],
    "AdditiveExpressionZegond": [["TermZegond", "D"]],
    "D": [["Addop", "#SYMB", "Term", "#OPERATE","D"], []],
    "Addop": [["+"], ["-"]],
    "Term": [["SignedFactor", "G"]],
    "TermPrime": [["SignedFactorPrime", "G"]],
    "TermZegond": [["SignedFactorZegond", "G"]],
    "G": [["*", "#SYMB", "SignedFactor", "#OPERATE", "G"], []],
    "SignedFactor": [["+", "Factor"], ["-", "Factor", "#NEG"], ["Factor"]],
    "SignedFactorPrime": [["FactorPrime"]],
    "SignedFactorZegond": [["+", "Factor"], ["-", "Factor", "#NEG"], ["FactorZegond"]],
    "Factor": [["(", "Expression", ")"], ["ID", "#PID", "VarCallPrime"], ["NUM","#IMM"]],
    "VarCallPrime": [["(", "Args", ")"], ["VarPrime"]],
    "VarPrime": [["[", "Expression", "]", "#LIST_ACC"], []],
    "FactorPrime": [["(", "Args", ")"], []],
    "FactorZegond": [["(", "Expression", ")"], ["NUM", "#IMM"]],
    "Args": [["ArgList"], []],
    "ArgList": [["Expression", "ArgListPrime"]],
    "ArgListPrime": [[",", "Expression", "ArgListPrime"], []],
}

EPS = ""